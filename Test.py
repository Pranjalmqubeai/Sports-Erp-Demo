import streamlit as st
import openai
import speech_recognition as sr
from docx import Document
import os
# OpenAI API key (replace with your actual API key)

openai.api_key = os.getenv("OPENAI_API_KEY")

def generate_response(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a legal assistant helping to draft a football player contract."},
            {"role": "user", "content": prompt},
        ]
    )
    return response.choices[0].message["content"]

def create_contract(data):
    doc = Document()
    doc.add_heading('Football Player Contract', 0)
    
    doc.add_paragraph(f"Player Name: {data['player_name']}")
    doc.add_paragraph(f"Club Name: {data['club_name']}")
    doc.add_paragraph(f"Contract Duration: {data['contract_duration']}")
    doc.add_paragraph(f"Salary: {data['salary']}")
    
    doc.add_heading('Terms and Conditions', level=1)
    doc.add_paragraph(data['terms_conditions'])
    
    doc.add_paragraph("\n\n\n_________________________")
    doc.add_paragraph("Player Signature")
    
    doc.add_paragraph("\n\n\n_________________________")
    doc.add_paragraph("Club Signature")
    
    return doc

def transcribe_audio():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.adjust_for_ambient_noise(source)
        with st.spinner(""):
            try:
                audio = r.listen(source, timeout=5, phrase_time_limit=5)
                with st.spinner(""):
                    text = r.recognize_google(audio)
                    # st.success(f"You said: {text}", icon="üó£Ô∏è")
                    st.session_state.user_input = text  # Directly set the session state variable
            except sr.UnknownValueError:
                st.error("Could not understand audio")
                st.session_state.user_input = ""
            except sr.RequestError as e:
                st.error(f"Could not request results; {e}")
                st.session_state.user_input = ""

# Initialize session state
if "step" not in st.session_state:
    st.session_state.step = 0
if "data" not in st.session_state:
    st.session_state.data = {}
if "user_input" not in st.session_state:
    st.session_state.user_input = ""

# Streamlit chatbot interface
st.title("Football Player Contract Generator")

questions = [
    "What is the player's name?",
    "What is the club's name?",
    "What is the contract duration?",
    "What is the player's salary?",
]

if st.session_state.step < len(questions):
    st.header(f"Step {st.session_state.step + 1}: {questions[st.session_state.step]}")
    
    col1, col2 = st.columns([8, 1])
    
    with col1:
        # Update user_input directly here
        user_input = st.text_input("Enter your answer:", key=f"user_input_{st.session_state.step}", value=st.session_state.user_input)
        
    with col2:
        
        mic_button = st.button("üéôÔ∏è", key=f"mic_button_{st.session_state.step}")
        
        if mic_button:
            transcribe_audio()  # Update the session state with transcribed text

    # Display the recognized text in full width
    if st.session_state.user_input:
        st.write(f"""
        <div style='background-color: #234324; padding: 10px; border-radius: 5px; width: 100%; color: white; text-align: center;'>
            You said: {st.session_state.user_input}
        </div>
        """, unsafe_allow_html=True)

    if st.button("Submit", key=f"submit_button_{st.session_state.step}"):
        st.session_state.data[st.session_state.step] = user_input
        st.session_state.step += 1
        st.session_state.user_input = ""  # Reset input field for the next step

else:
    st.header("Review and Confirm Contract")
    # Generate contract terms and conditions
    prompt = "Please generate terms and conditions for a football player contract."
    terms_conditions = generate_response(prompt)
    
    st.session_state.data['terms_conditions'] = terms_conditions
    
    # Show generated terms and conditions
    st.text_area("Terms and Conditions (generated by AI)", value=terms_conditions, height=200)
    
    if st.button("Confirm and Generate Contract", key="generate_contract_button"):
        data = {
            "player_name": st.session_state.data[0],
            "club_name": st.session_state.data[1],
            "contract_duration": st.session_state.data[2],
            "salary": st.session_state.data[3],
            "terms_conditions": st.session_state.data['terms_conditions'],
        }
        doc = create_contract(data)
        
        doc_name = "football_player_contract.docx"
        doc.save(doc_name)
        
        with open(doc_name, "rb") as file:
            st.download_button(
                label="Download Contract",
                data=file,
                file_name=doc_name,
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
